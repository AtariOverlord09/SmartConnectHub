from typing import Union

from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext

from tgbot import keyboards as kb, misc
from tgbot.validators import email_validator as email

last_message = None
last_error_email = ()


async def user_start(message: Message, state: FSMContext):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç –∏–∑ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ SmartConnectHub!ü§ñ\n"
        "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º—Å—è? –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ!‚ÑπÔ∏è"
    )
    await message.answer(
        "–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?",
        reply_markup=await kb.inline_user.get_inline_start_menu(),
    )
    await state.set_state(misc.states.FSMStart.handshake)


async def sex_choice(
    callback: CallbackQuery,
    state: FSMContext,
    **kwargs,
):

    async with state.proxy() as data:
        data['sex'] = callback

    if callback.data in "categories":

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            reply_markup=await kb.inline_user.get_inline_age_menu(
                callback.data,
            ),
        )

    else:

        await callback.message.edit_text(
            "–°–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç?",
            reply_markup=await kb.inline_user.get_inline_age_menu(
                callback.data,
            ),
        )

    await state.set_state(misc.states.FSMStart.age_choice)


async def choice_education(callback: CallbackQuery, state: FSMContext):

    async with state.proxy() as data:
        age = callback.data.split('#')
        print(age[1])
        data['age'] = age[1]

    await callback.message.edit_text(
        "–ì–¥–µ –≤—ã —É—á–∏—Ç–µ—Å—å?",
        reply_markup=await kb.inline_user.get_education_menu(),
    )

    await state.set_state(misc.states.FSMStart.education_choice)


async def choice_interest_category(callback: CallbackQuery, state: FSMContext):

    async with state.proxy() as data:
        education = callback.data.split('#')
        print(education[1])
        data['education'] = education[1]

    await callback.message.edit_text(
        "–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=await kb.inline_user.get_interest_menu(),
    )

    await state.set_state(misc.states.FSMStart.interest_category_choice)


async def choice_experience(callback: CallbackQuery, state: FSMContext):

    async with state.proxy() as data:
        category = callback.data.split('#')
        print(category[1])
        data['interest_category'] = category[1]

    await callback.message.edit_text(
        "–ö–∞–∫–æ–≤ –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π?",
        reply_markup=await kb.inline_user.get_experience_menu(),
    )

    await state.set_state(misc.states.FSMStart.experience_choice)


async def email_input(answr: Union[CallbackQuery, Message], state: FSMContext):

    global last_message

    if type(answr) is CallbackQuery:
        async with state.proxy() as data:
            experience = answr.data.split('#')
            print(experience[1])
            data['experience'] = experience[1]

        last_message = await answr.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email üìß\n\n"
            "–í SmartConnect –º—ã —Ç–∞–∫–∂–µ –Ω–µ –ª—é–±–∏–º —Å–ø–∞–º.\n"
            "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à –∫–æ–º—Ñ–æ—Ä—Ç, –ø–æ—ç—Ç–æ–º—É –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å"
            "–≤–∞–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!",
            reply_markup=await kb.inline_user.get_email_menu(),
        )
    else:
        global last_error_email
        await last_message.delete()
        last_error_email = last_error_email + (answr, )
        last_message = await answr.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email üìß",
            reply_markup=await kb.inline_user.get_email_menu(),
        )

    await state.set_state(misc.states.FSMStart.email)


async def showdown(answr: Union[CallbackQuery, Message], state: FSMContext):

    if type(answr) is Message:
        validate_email = await email.validate_email(answr.text)
        if validate_email:
            async with state.proxy() as data:
                data['email'] = answr.text
        else:
            await state.set_state(misc.states.FSMStart.email_error)
            await email_input(answr, state)
            return

    msg = (
        f'–û—Ç–ª–∏—á–Ω–æ, –≤–æ—Ç –º—ã –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å, {answr.from_user.first_name}!ü§ù\n\n'
        '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –Ω–∞—à—É –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É. '
        '–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ! üåü\n\n'
        '–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å'
        '–≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.'
        '–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –í–∞—Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ,'
        ' –∫–æ—Ç–æ—Ä–æ–µ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ –í–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º'
        '–∏ –ø—Ä–∏–Ω–æ—Å–∏–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–ª—å–∑—É. üí°\n\n'
        '–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ —Å –Ω–∞–º–∏.'
        '–ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –í–∞–º –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø—Ä–∏—è—Ç–Ω—ã–π –æ–ø—ã—Ç. ü§ó\n\n'
        '–ï—â–µ —Ä–∞–∑ —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ!'
        '–ú—ã —Ü–µ–Ω–∏–º –í–∞—à–µ –≤—Ä–µ–º—è –∏ –¥–æ–≤–µ—Ä–∏–µ.'
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ! üéâ\n\n'
        '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è,'
        '–Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! üí™\n\n'
        '–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏, '
        '–∫–æ–º–∞–Ω–¥–∞ SmartConnectHub!'
    )
    if type(answr) is CallbackQuery:

        if answr.data == 'next#4!':
            await last_message.delete()

        await answr.message.edit_text(
            text=msg,
            reply_markup=await kb.inline_user.get_showdown_menu(),
        )
    else:
        if last_message:
            await last_message.delete()
            await answr.delete()
            if last_error_email:
                for error_email in last_error_email:
                    await error_email.delete()
        await answr.answer(
            text=msg,
            reply_markup=await kb.inline_user.get_showdown_menu(),
        )

    await state.set_state(misc.states.FSMStart.showdown)

# -------------------------------–ë–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ–±—è------------------------


async def introduce_yourself_part1(callback: CallbackQuery, state: FSMContext):
    global last_message
    last_message = await callback.message.edit_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø - Smart-Bot8000!ü§ñ\n\n"
        "–ú–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏,"
        "–æ–±—É—á–µ–Ω–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º–∏.üêù\n"
        "–Ø –æ–±–ª–∞–¥–∞—é –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —É–º–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
        "–∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –≤–æ –º–Ω–æ–≥–∏—Ö –∑–∞–¥–∞—á–∞—Ö.\n"
        "–î–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤ —è —è–≤–ª—è—é—Å—å –Ω–∞—Å—Ç–æ—è—â–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º!\n"
        "–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –æ—Ñ—Ñ–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á,"
        "–ø–æ–∏—Å–∫–æ–º –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–ª–∏ –ø—Ä–∏–¥—É–º—ã–≤–∞–Ω–∏–µ–º –∑–∞–¥–∞—á"
        "–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        "–Ø –≤–æ–∑—å–º—É –Ω–∞ —Å–µ–±—è —ç—Ç–∏ –∑–∞–¥–∞—á–∏ –∏ —Å–¥–µ–ª–∞—é –≤—Å–µ,"
        "—á—Ç–æ–±—ã –≤–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–≤–µ—Ç–∞–ª–æ.\n\n"
        "–ê –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ!"
        "–ü—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É, –∏ –º–æ–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ãüñ• —Å–º–æ–≥—É—Ç"
        "–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∏–ª—É—á—à–µ–µ"
        "—Å–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–ª—è –≤–∞—Å.",
        reply_markup=await kb.inline_user.get_introduce_menu(1),
    )
    await state.set_state(misc.states.FSMStart.introduce_part1)


async def introduce_yourself_part2(callback: CallbackQuery, state: FSMContext):
    await last_message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "–í —Ç–∞–∫–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –í—ã"
        "–±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–µ –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã,"
        "—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ—Ñ—Ñ–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∞—Ö –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è"
        "—É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–æ –º–Ω–µ, —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –≤–æ–ø–ª–æ—Ç–∏—Ç—å"
        "–≤–∞—à–∏ –∏–¥–µ–∏ –∏ —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç–æ—è—â–∏–º –º–µ—Å—Ç–æ–º —Ä–æ—Å—Ç–∞ –∏"
        "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n\n–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ!‚ú®",
        reply_markup=await kb.inline_user.get_introduce_menu(2),
    )
    await state.set_state(misc.states.FSMStart.introduce_part2)
# -------------------------------–ö–û–ù–ï–¶-----------------------------------------

# -------------------------------–ë–æ—Ç —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ —Ç–æ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç---------


async def show_the_path(callback: CallbackQuery, state: FSMContext):
    global last_message
    last_message = await callback.message.edit_text(
        "–ö–∞–∫ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ –≤—ã –∑–∞–¥–∞–ª–∏ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!"
        "\n–ï—Å–ª–∏ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã,"
        "—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É"
        "—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n"
        "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ! –£ –≤–∞—Å —É–∂–µ —Å–µ–π—á–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—â–∞—Ç—å—Å—è,"
        "—Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –∏ –æ–±—É—á–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–º–∏ –ª—é–¥—å–º–∏!\n",
        reply_markup=await kb.inline_user.get_introduce_menu(3),
    )
    await state.set_state(misc.states.FSMStart.the_path)


async def show_the_path_part2(callback: CallbackQuery, state: FSMContext):
    await last_message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∏–ª–∏ —É –≤–∞—Å"
        "–µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤"
        "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–≤ '–Ø –µ—â—ë –æ—Å–º–æ—Ç—Ä—é—Å—å –∑–¥–µ—Å—å'!",
        reply_markup=await kb.inline_user.get_introduce_menu(4),
    )
    await state.set_state(misc.states.FSMStart.the_path_part2)

# -------------------------------–ö–û–ù–ï–¶-------------------------


async def main_menu(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!ü™¨\n\n"
        "–õ—É—á—à–∏–π –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –æ–±—É—á–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º–∏!\n",
        reply_markup=await kb.inline_user.get_main_menu(),
    )
    await state.set_state(misc.states.FSMStart.main_menu)


def register_user(dp: Dispatcher):
    dp.register_message_handler(user_start, commands=["start"], state="*")
    dp.register_callback_query_handler(
        sex_choice,
        lambda call: "back" in call.data or "categories" in call.data or any(
            category in call.data for category in [
                "Inter",
                "Junior",
                "Middle",
                "Senior"
            ]
        ),
        state=[misc.states.FSMStart.handshake, misc.states.FSMStart.age_choice]
    )
    dp.register_callback_query_handler(
        choice_education,
        lambda call: call.data.startswith("age"),
        state=misc.states.FSMStart.age_choice,
    )
    dp.register_callback_query_handler(
        choice_interest_category,
        lambda call: call.data.startswith("education"),
        state=misc.states.FSMStart.education_choice,
    )
    dp.register_callback_query_handler(
        choice_experience,
        lambda call: "interest#" in call.data,
        state=misc.states.FSMStart.interest_category_choice,
    )
    dp.register_callback_query_handler(
        email_input,
        lambda call: call.data.startswith("experience"),
        state=(
            misc.states.FSMStart.experience_choice,
            misc.states.FSMStart.email_error,
        )
    )
    dp.register_callback_query_handler(
        showdown,
        lambda answr: answr.data.startswith("email_") or answr.data.startswith(
            "next#"
        ),
        state=(
            misc.states.FSMStart.email,
            misc.states.FSMStart.email_error,
            misc.states.FSMStart.introduce_part2,
            misc.states.FSMStart.the_path_part2,
        )
    )
    dp.register_message_handler(
        showdown,
        state=misc.states.FSMStart.email,
    )
    dp.register_callback_query_handler(
        introduce_yourself_part1,
        lambda call: "who_are_you" in call.data,
        state=misc.states.FSMStart.showdown,
    )
    dp.register_callback_query_handler(
        introduce_yourself_part2,
        lambda call: "next#1" in call.data,
        state=misc.states.FSMStart.introduce_part1,
    )
    dp.register_callback_query_handler(
        show_the_path,
        lambda call: "where_am_i" in call.data,
        state=misc.states.FSMStart.showdown,
    )
    dp.register_callback_query_handler(
        show_the_path_part2,
        lambda call: "next#3" in call.data,
        state=misc.states.FSMStart.the_path,
    )
    dp.register_callback_query_handler(
        main_menu,
        lambda call: "menu" in call.data,
        state=misc.states.FSMStart.showdown,
    )
