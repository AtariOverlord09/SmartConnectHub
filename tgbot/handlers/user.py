import datetime
import os
from typing import Union

from aiogram import Dispatcher
from aiogram.types import (
    Message,
    CallbackQuery,
    PollAnswer,
    ChatMemberUpdated,
)
from aiogram.dispatcher import FSMContext

from tgbot import keyboards as kb, misc
from tgbot.validators import email_validator as email
from tgbot.models import models as db

last_message = None
last_error_email = ()


async def user_start(
    answr: Union[Message, CallbackQuery],
    state: FSMContext,
):
    user_tg_id = answr.from_user.id
    user = await db.get_user(user_tg_id)

    print(user)

    current_state = await state.get_state()
    print(current_state)

    if not user:
        await db.create_user(
            user_tg_id,
            answr.from_user.full_name,
            answr.from_user.username,
            datetime.datetime.now(),
        )

    elif str(current_state) in str(misc.states.FSMStart.main_menu):
        pass

    else:
        await main_menu(answr, state)
        return


    if type(answr) is Message and str(current_state) not in str(misc.states.FSMStart.main_menu):
        send = answr
        await send.reply(
            "–ü—Ä–∏–≤–µ—Ç –∏–∑ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ SmartConnectHub!ü§ñ\n"
            "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è? –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ!‚ÑπÔ∏è"
        )
        await state.set_state(misc.states.FSMStart.handshake)

    elif type(answr) is CallbackQuery or type(answr) is Message:

        if type(answr) is Message:
            send = answr.reply

        else:
            send = answr.message.edit_text

        await send(
            "–•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.üòå",
        )
        await state.set_state(misc.states.FSMStart.fill_form_again)


    if type(answr) is Message:
        send = answr
    else:
        send = answr.message

    await send.reply(
        "–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?",
        reply_markup=await kb.inline_user.get_inline_start_menu(),
    )


async def age_choice(
    callback: CallbackQuery,
    state: FSMContext,
    **kwargs,
):

    if callback.data in ("categories#male", "categories#female"):
        async with state.proxy() as data:
            data['sex'] = callback.data.split("#")[1]
            print(data)

    if "categories#" in callback.data:

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            reply_markup=await kb.inline_user.get_inline_age_menu(
                callback.data,
            ),
        )

    else:

        await callback.message.edit_text(
            "–°–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç?",
            reply_markup=await kb.inline_user.get_inline_age_menu(
                callback.data,
            ),
        )

    current_state = await state.get_state()

    if str(current_state) in str(misc.states.FSMStart.handshake):
        await state.set_state(misc.states.FSMStart.age_choice)

    elif str(current_state) in str(misc.states.FSMStart.age_choice):
        pass

    else:
        await state.set_state(misc.states.FSMStart.fill_form_again_part2)
    print(f"---{current_state}")


async def choice_education(callback: CallbackQuery, state: FSMContext):

    async with state.proxy() as data:
        age = callback.data.split('#')
        data['age'] = age[1]

    await callback.message.edit_text(
        "–ì–¥–µ –≤—ã —É—á–∏—Ç–µ—Å—å?",
        reply_markup=await kb.inline_user.get_education_menu(),
    )

    current_state = await state.get_state()
    if str(current_state) in str(misc.states.FSMStart.age_choice):
        await state.set_state(misc.states.FSMStart.education_choice)
    else:
        await state.set_state(misc.states.FSMStart.fill_form_again_part3)


async def choice_interest_category(callback: CallbackQuery, state: FSMContext):

    async with state.proxy() as data:
        education = callback.data.split('#')
        print(education[1])
        data['education'] = education[1]

    await callback.message.edit_text(
        "–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=await kb.inline_user.get_interest_menu(),
    )
    current_state = await state.get_state()
    if str(current_state) in str(misc.states.FSMStart.education_choice):
        await state.set_state(misc.states.FSMStart.interest_category_choice)
    else:
        await state.set_state(misc.states.FSMStart.fill_form_again_part4)


async def choice_experience(callback: CallbackQuery, state: FSMContext):

    async with state.proxy() as data:
        category = callback.data.split('#')
        print(category[1])
        data['interest_category'] = category[1]

    await callback.message.edit_text(
        "–ö–∞–∫–æ–≤ –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π?",
        reply_markup=await kb.inline_user.get_experience_menu(),
    )

    current_state = await state.get_state()
    if str(current_state) in str(misc.states.FSMStart.interest_category_choice):
        await state.set_state(misc.states.FSMStart.experience_choice)
    else:
        await state.set_state(misc.states.FSMStart.fill_form_again_part5)


async def email_input(answr: Union[CallbackQuery, Message], state: FSMContext):

    global last_message

    if type(answr) is CallbackQuery:
        async with state.proxy() as data:
            experience = answr.data.split('#')
            print(experience[1])
            data['experience'] = experience[1]

        last_message = await answr.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email üìß\n\n"
            "–í SmartConnect –º—ã —Ç–∞–∫–∂–µ –Ω–µ –ª—é–±–∏–º —Å–ø–∞–º.\n"
            "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à –∫–æ–º—Ñ–æ—Ä—Ç, –ø–æ—ç—Ç–æ–º—É –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å "
            "–≤–∞–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!",
            reply_markup=await kb.inline_user.get_email_menu(),
        )
    else:
        global last_error_email
        await last_message.delete()
        last_error_email = last_error_email + (answr, )
        last_message = await answr.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email üìß",
            reply_markup=await kb.inline_user.get_email_menu(),
        )
    current_state = await state.get_state()
    if str(current_state) in str(misc.states.FSMStart.experience_choice):
        await state.set_state(misc.states.FSMStart.email)
    else:
        await state.set_state(misc.states.FSMStart.fill_form_again_part6)


async def showdown(answr: Union[CallbackQuery, Message], state: FSMContext):

    current_state = await state.get_state()

    if type(answr) is Message:
        validate_email = await email.validate_email(answr.text)
        if validate_email:
            async with state.proxy() as data:
                data['email'] = answr.text
        else:
            await state.set_state(misc.states.FSMStart.email_error)
            await email_input(answr, state)
            return

    data = await state.get_data()
    print(data)
    await db.update_user(
        answr.from_user.id,
        **data,
    )

    if (
        str(current_state) in str(misc.states.FSMStart.email) or
        str(current_state) in str(misc.states.FSMStart.about_project2) or
        str(current_state) in str(misc.states.FSMStart.introduce_part2) or
        str(current_state) in str(misc.states.FSMStart.the_path_part2)
    ):
        await state.set_state(misc.states.FSMStart.showdown)

    elif str(current_state) in str(misc.states.FSMStart.fill_form_again_part6):
        await state.set_state(misc.states.FSMStart.fill_form_over)
        await main_menu(answr, state)
        return

    msg = (
        f'–û—Ç–ª–∏—á–Ω–æ, –≤–æ—Ç –º—ã –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å, {answr.from_user.first_name}!ü§ù\n\n'
        '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –Ω–∞—à—É –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É. '
        '–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ! üåü\n\n'
        '–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å '
        '–≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏. '
        '–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –í–∞—Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ,'
        ' –∫–æ—Ç–æ—Ä–æ–µ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ –í–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º'
        '–∏ –ø—Ä–∏–Ω–æ—Å–∏–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–ª—å–∑—É. üí°\n\n'
        '–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ —Å –Ω–∞–º–∏. '
        '–ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –í–∞–º –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø—Ä–∏—è—Ç–Ω—ã–π –æ–ø—ã—Ç. ü§ó\n\n'
        '–ï—â–µ —Ä–∞–∑ —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ! '
        '–ú—ã —Ü–µ–Ω–∏–º –í–∞—à–µ –≤—Ä–µ–º—è –∏ –¥–æ–≤–µ—Ä–∏–µ. '
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ! üéâ\n\n'
        '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, '
        '–Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! üí™\n\n'
        '–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏, '
        '–∫–æ–º–∞–Ω–¥–∞ SmartConnectHub!'
    )
    if type(answr) is CallbackQuery:

        if answr.data == 'next#4!':
            await last_message.delete()
        elif answr.data == 'next#55':
            await last_message.delete()

        await answr.message.edit_text(
            text=msg,
            reply_markup=await kb.inline_user.get_showdown_menu(),
        )
    else:
        if last_message:
            await last_message.delete()
            await answr.delete()
            if last_error_email:
                for error_email in last_error_email:
                    await error_email.delete()
        await answr.answer(
            text=msg,
            reply_markup=await kb.inline_user.get_showdown_menu(),
        )

# -------------------------------–ë–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ–±—è------------------------


async def introduce_yourself_part1(callback: CallbackQuery, state: FSMContext):
    global last_message
    last_message = await callback.message.edit_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø - Smart-Bot8000!ü§ñ\n\n"
        "–ú–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, "
        "–æ–±—É—á–µ–Ω–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º–∏.üêù\n"
        "–Ø –æ–±–ª–∞–¥–∞—é –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —É–º–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π "
        "–∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –≤–æ –º–Ω–æ–≥–∏—Ö –∑–∞–¥–∞—á–∞—Ö.\n"
        "–î–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤ —è —è–≤–ª—è—é—Å—å –Ω–∞—Å—Ç–æ—è—â–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º!\n"
        "–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –æ—Ñ—Ñ–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á, "
        "–ø–æ–∏—Å–∫–æ–º –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–ª–∏ –ø—Ä–∏–¥—É–º—ã–≤–∞–Ω–∏–µ–º –∑–∞–¥–∞—á "
        "–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. "
        "–Ø –≤–æ–∑—å–º—É –Ω–∞ —Å–µ–±—è —ç—Ç–∏ –∑–∞–¥–∞—á–∏ –∏ —Å–¥–µ–ª–∞—é –≤—Å–µ, "
        "—á—Ç–æ–±—ã –≤–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–≤–µ—Ç–∞–ª–æ.\n\n"
        "–ê –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ! "
        "–ü—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É, –∏ –º–æ–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ãüñ• —Å–º–æ–≥—É—Ç "
        "–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∏–ª—É—á—à–µ–µ "
        "—Å–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–ª—è –≤–∞—Å.",
        reply_markup=await kb.inline_user.get_introduce_menu(1),
    )
    await state.set_state(misc.states.FSMStart.introduce_part1)


async def introduce_yourself_part2(callback: CallbackQuery, state: FSMContext):
    await last_message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "–í —Ç–∞–∫–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –í—ã "
        "–±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–µ –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, "
        "—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ—Ñ—Ñ–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∞—Ö –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è "
        "—É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–æ –º–Ω–µ, —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –≤–æ–ø–ª–æ—Ç–∏—Ç—å "
        "–≤–∞—à–∏ –∏–¥–µ–∏ –∏ —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç–æ—è—â–∏–º –º–µ—Å—Ç–æ–º —Ä–æ—Å—Ç–∞ –∏ "
        "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n\n–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ!‚ú®",
        reply_markup=await kb.inline_user.get_introduce_menu(2),
    )
    await state.set_state(misc.states.FSMStart.introduce_part2)
# -------------------------------–ö–û–ù–ï–¶-----------------------------------------

# -------------------------------–ë–æ—Ç —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ —Ç–æ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç---------


async def show_the_path(callback: CallbackQuery, state: FSMContext):
    global last_message
    last_message = await callback.message.edit_text(
        "–ö–∞–∫ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ –≤—ã –∑–∞–¥–∞–ª–∏ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!"
        "\n–ï—Å–ª–∏ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã,"
        "—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É "
        "—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n"
        "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ! –£ –≤–∞—Å —É–∂–µ —Å–µ–π—á–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—â–∞—Ç—å—Å—è, "
        "—Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –∏ –æ–±—É—á–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–º–∏ –ª—é–¥—å–º–∏!\n",
        reply_markup=await kb.inline_user.get_introduce_menu(3),
    )
    await state.set_state(misc.states.FSMStart.the_path)


async def show_the_path_part2(callback: CallbackQuery, state: FSMContext):
    await last_message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∏–ª–∏ —É –≤–∞—Å "
        "–µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ "
        "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–≤ '–Ø –µ—â—ë –æ—Å–º–æ—Ç—Ä—é—Å—å –∑–¥–µ—Å—å'!",
        reply_markup=await kb.inline_user.get_introduce_menu(4),
    )
    await state.set_state(misc.states.FSMStart.the_path_part2)

# -------------------------------–ö–û–ù–ï–¶-------------------------


async def main_menu(answr: Union[CallbackQuery, Message], state: FSMContext):
    current_state = await state.get_state()

    print(current_state)

    if str(current_state) in str(misc.states.FSMStart.fill_form_over):

        text_to_user = (
            "–ê–Ω–∫–µ—Ç—É –ø–µ—Ä–µ–¥–µ–ª–∞–ª–∏, –∞ —á—Ç–æ –¥–∞–ª—å—à–µ –¥–µ–ª–∞—Ç—å –±—É–¥–µ–º?üòè\n\n"
            "–î–∞ –∏ –Ω–µ–≤–∞–∂–Ω–æ —ç—Ç–æ, –≤–µ–¥—å —Å –í–∞–º–∏ –ª—É—á—à–∏–π "
            "–ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–∏ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ - Smart-Bot8000üõ†ü¶æ"
        )

        if type(answr) is CallbackQuery:
            send = answr.message.edit_text
        else:
            send = answr.reply

    else:
        text_to_user = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!ü™¨\n\n"
            "–õ—É—á—à–∏–π –±–æ—Ç –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è, "
            "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤!\n"
        )
        if type(answr) is CallbackQuery:
            send = answr.message.edit_text
        else:
            send = answr.reply

    await send(
        text=text_to_user,
        reply_markup=await kb.inline_user.get_main_menu(),
    )

    await state.set_state(misc.states.FSMStart.main_menu)


# –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏


async def support(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!",
        reply_markup=await kb.inline_user.get_support_menu(),
    )

    await state.set_state(misc.states.FSMStart.support)


async def supp_question(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã - "
        "–Ω–∞ –Ω–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!üë®‚Äçüíª\n"
        "–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é, —Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ '–ì–ª–∞–≤–Ω–∞—è' "
        "–æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º‚úåÔ∏è",
    )
    await state.set_state(misc.states.FSMStart.supp_question)


async def ask_to_admin(message: Message):
    await message.reply(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!"
    )
    user_id = message.from_user.id
    await message.bot.send_message(
        chat_id=os.getenv("ADMIN_ID"),
        text=(
            f"–ü—Ä–∏—à–µ–ª –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.full_name}\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n"
            f"–Æ–∑–µ—Ä–Ω–µ–π–º: {message.from_user.username}\n\n"
            f"–°–∞–º –≤–æ–ø—Ä–æ—Å:\n{message.text}"
        ),
        reply_markup=await kb.inline_admin.get_admin_answer_menu(
            user_id,
            message.text,
        ),
    )


async def support_contact(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º!üëá",
        reply_markup=await kb.inline_admin.get_contact_url(),
    )
    await state.set_state(misc.states.FSMAdmin.support_contact)


async def join_to_community(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–°–µ–π—á–∞—Å –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –≤ –º–∏—Ä –Ω—É–ª–µ–π –∏ –µ–¥–∏–Ω–∏—Ü - Developers Hub!üñ•\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!üõ∏\n\n"
        "*–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ—Ç–æ—Ç–∏–ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç "
        "—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ - —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ü–û.\n",
        reply_markup=await kb.inline_user.get_join_community_menu(),
    )
    await state.set_state(misc.states.FSMStart.join_to_community)


async def poll_answer(poll_answer: PollAnswer):
    # this handler starts after user choosed any answer

    answer_ids = poll_answer.option_ids # list of answers
    print(answer_ids)
    user_id = poll_answer.user.id
    poll_id = poll_answer.poll_id
    print(poll_answer)
    print("fool")


async def on_chat_member_join(message: ChatMemberUpdated):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if message.new_chat_member.is_bot:
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = message.new_chat_member.user
    first_name = user.first_name if user.first_name else ""
    last_name = user.last_name if user.last_name else ""

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {first_name} {last_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —á–∞—Ç!"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply_text(welcome_message)


async def about_project(callback: CallbackQuery, state: FSMContext):
    global last_message

    last_message = await callback.message.edit_text(
        "SmartConnectHub - –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å —Ö–æ—Ä–æ—à–∏–º–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞–º–∏.\n"
        "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ–≥–æ –≤—Å–µ–≥–æ –ª–∏—à—å –ø—Ä–æ—Ç–æ—Ç–∏–ø, –Ω–æ –ø–æ –º–µ—Ä–µ —Ä–∞–∑–≤–∏—Ç–∏—è(–∞ –æ–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç) "
        "–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.",
        reply_markup=await kb.inline_user.get_introduce_menu(88),
    )
    await state.set_state(misc.states.FSMStart.about_project)


async def about_project2(callback: CallbackQuery, state: FSMContext):
    await last_message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "–Ø –æ—Ç–¥–µ–ª—å–Ω–æ –∑–∞–¥—É–º–∞–ª—Å—è –æ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏ –∏—Å—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç.\n"
        "–≠—Ç–æ –±—ã–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä—É–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –ø–æ—Å–∫–æ–ª—å–∫—É –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –±—ã–ª–æ –Ω–µ–ª–µ–≥–∫–æ"
        " –ø—Ä–∏–¥—É–º–∞—Ç—å —á—Ç–æ-—Ç–æ —Å—Ç–æ—è—â–µ–µ. –ö —Ç–æ–º—É –∂–µ —è –±—ç–∫–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –Ω–æ –Ω–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ò–ò.\n"
        "–Ø –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–Ω–µ–¥—Ä–∏—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏ GPT –∏ Midjourney5 –≤ —á–∞—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤, "
        "–∞ –≤ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ —É–∂–µ –ø–æ—Ç–æ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ò–ò –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º.\n"
        "–ö —Å–ª–æ–≤—É —è –¥–∞–∂–µ –ø—Ä–æ–≤–æ–¥–∏–ª –æ–Ω–ª–∞–π–Ω –∏ –æ—Ñ—Ñ–ª–∞–π–Ω –æ–ø—Ä–æ—Å—ã –Ω–∞ —ç—Ç—É —Ç–µ–º—É –∏ –±—É–¥—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ —Å–æ –º–Ω–æ–π —Å–æ–≥–ª–∞—Å–Ω—ã.\n"
        "–°–µ–π—á–∞—Å –±–æ—Ç —Å–ø–æ—Å–æ–±–µ–Ω –¥–æ—Å—Ç–∞–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –ø–æ–º–æ—â—å—é Bing AI(–ò–ò –æ—Ç Microsoft) –∏ –ø–æ—Å—Ç–∏—Ç—å –∏—Ö –Ω–∞ –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞.\n"
        "–¢–∞–∫ –∂–µ –±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á.\n"
        "–Ø –Ω–∞–¥–µ—é—Å—å —á—Ç–æ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –º–æ—è –∑–∞–¥—É–º–∫–∞, –≤–µ–¥—å —ç—Ç–æ –≥–ª–∞–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –¥–ª—è –º–µ–Ω—è:)\n"
        "–í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —è –ø–æ—Å—Ç–∞—Ä–∞–ª—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–≤–æ–∏–º –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–º –Ω–∞–≤—ã–∫–∞–º "
        "–≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. "
        "–±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ Python.\n\n"
        "–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏,\n"
        "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ SmartConnectHub –ò–≤–∞–Ω!",
        reply_markup=await kb.inline_user.get_introduce_menu(55),
    )
    await state.set_state(misc.states.FSMStart.about_project2)


def register_user(dp: Dispatcher):

    dp.register_callback_query_handler(
        user_start,
        lambda call: "fill_form_again" in call.data,
        state=misc.states.FSMStart.main_menu,
    )
    dp.register_message_handler(
        user_start,
        lambda message: message.text == "/start",
        state="*",
    )
    dp.register_callback_query_handler(
        age_choice,
        lambda call: "categories" in call.data or any(
            category in call.data for category in [
                "Inter",
                "Junior",
                "Middle",
                "Senior"
            ]
        ),
        state=[
            misc.states.FSMStart.handshake,
            misc.states.FSMStart.age_choice,
            misc.states.FSMStart.fill_form_again,
            misc.states.FSMStart.fill_form_again_part2
        ]
    )
    dp.register_callback_query_handler(
        choice_education,
        lambda call: call.data.startswith("age"),
        state=(
            misc.states.FSMStart.age_choice,
            misc.states.FSMStart.fill_form_again_part2,
        )
    )
    dp.register_callback_query_handler(
        choice_interest_category,
        lambda call: call.data.startswith("education"),
        state=(
            misc.states.FSMStart.education_choice,
            misc.states.FSMStart.fill_form_again_part3,
        )
    )
    dp.register_callback_query_handler(
        choice_experience,
        lambda call: "interest#" in call.data,
        state=(
            misc.states.FSMStart.interest_category_choice,
            misc.states.FSMStart.fill_form_again_part4,
        )
    )
    dp.register_callback_query_handler(
        email_input,
        lambda call: call.data.startswith("experience"),
        state=(
            misc.states.FSMStart.experience_choice,
            misc.states.FSMStart.email_error,
            misc.states.FSMStart.introduce_part1,
            misc.states.FSMStart.fill_form_again_part5,
        )
    )
    dp.register_callback_query_handler(
        showdown,
        lambda answr: answr.data.startswith("email_") or answr.data.startswith(
            "next#"
        ),
        state=(
            misc.states.FSMStart.email,
            misc.states.FSMStart.email_error,
            misc.states.FSMStart.introduce_part2,
            misc.states.FSMStart.the_path_part2,
            misc.states.FSMStart.fill_form_again_part6,
            misc.states.FSMStart.about_project2,
        )
    )
    dp.register_message_handler(
        showdown,
        state=(
            misc.states.FSMStart.email,
            misc.states.FSMStart.fill_form_again_part6,
        )
    )
    dp.register_callback_query_handler(
        introduce_yourself_part1,
        lambda call: "who_are_you" in call.data,
        state=misc.states.FSMStart.showdown,
    )
    dp.register_callback_query_handler(
        introduce_yourself_part2,
        lambda call: "next#1" in call.data,
        state=misc.states.FSMStart.introduce_part1,
    )
    dp.register_callback_query_handler(
        show_the_path,
        lambda call: "where_am_i" in call.data,
        state=misc.states.FSMStart.showdown,
    )
    dp.register_callback_query_handler(
        show_the_path_part2,
        lambda call: "next#3" in call.data,
        state=misc.states.FSMStart.the_path,
    )
    dp.register_callback_query_handler(
        main_menu,
        lambda call: "menu" in call.data or ("back" in call.data),
        state=(
            misc.states.FSMStart.showdown,
            misc.states.FSMStart.support,
        )
    )
    dp.register_message_handler(
        main_menu,
        state=misc.states.FSMStart.fill_form_over,
    )
    dp.register_message_handler(
        main_menu,
        lambda message: message.text == "–ì–ª–∞–≤–Ω–∞—è",
        state=misc.states.FSMStart.supp_question,
    )
    dp.register_callback_query_handler(
        support,
        lambda call: "support" in call.data,
        state=(
            misc.states.FSMStart.main_menu,
        )
    )
    dp.register_callback_query_handler(
        supp_question,
        lambda call: "ask" in call.data,
        state=misc.states.FSMStart.support,
    )
    dp.register_message_handler(
        ask_to_admin,
        state=misc.states.FSMStart.supp_question,
    )
    dp.register_callback_query_handler(
        support_contact,
        lambda call: "menu#supp" in call.data,
        state=misc.states.FSMStart.support,
    )
    dp.register_callback_query_handler(
        join_to_community,
        lambda call: "join_to_community" in call.data,
        state=(
            misc.states.FSMStart.main_menu,
            misc.states.FSMStart.showdown,
        )
    )
    dp.register_poll_answer_handler(
        poll_answer,
    )
    dp.register_chat_member_handler(
        on_chat_member_join
    )
    dp.register_callback_query_handler(
        about_project,
        lambda callback: "#about_project" in callback.data,
        state=misc.states.FSMStart.showdown
    )
    dp.register_callback_query_handler(
        about_project2,
        lambda callback: "88" in callback.data,
        state=misc.states.FSMStart.about_project
    )
